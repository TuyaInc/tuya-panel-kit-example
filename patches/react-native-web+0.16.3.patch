diff --git a/node_modules/react-native-web/dist/exports/Picker/MultiPickerMixin.jsx b/node_modules/react-native-web/dist/exports/Picker/MultiPickerMixin.jsx
new file mode 100644
index 0000000..1b406a7
--- /dev/null
+++ b/node_modules/react-native-web/dist/exports/Picker/MultiPickerMixin.jsx
@@ -0,0 +1,52 @@
+import * as React from 'react';
+
+export default function(ComposedComponent) {
+  return class extends React.Component {
+    static defaultProps = {
+      prefixCls: 'rmc-multi-picker',
+      onValueChange() {}
+    };
+
+    getValue = () => {
+      const { children, selectedValue } = this.props;
+      if (selectedValue && selectedValue.length) {
+        return selectedValue;
+      } else {
+        if (!children) {
+          return [];
+        }
+        return React.Children.map(children, (c) => {
+          const cc = React.Children.toArray(c.children || c.props.children);
+          return cc && cc[0] && cc[0].props.value;
+        });
+      }
+    };
+
+    onChange = (i, v, cb) => {
+      const value = this.getValue().concat();
+      value[i] = v;
+      if (cb) {
+        cb(value, i);
+      }
+    };
+
+    onValueChange = (i, v) => {
+      this.onChange(i, v, this.props.onValueChange);
+    };
+
+    onScrollChange = (i, v) => {
+      this.onChange(i, v, this.props.onScrollChange);
+    };
+
+    render() {
+      return (
+        <ComposedComponent
+          {...this.props}
+          getValue={this.getValue}
+          onValueChange={this.onValueChange}
+          onScrollChange={this.props.onScrollChange && this.onScrollChange}
+        />
+      );
+    }
+  };
+}
diff --git a/node_modules/react-native-web/dist/exports/Picker/MutiPicker.jsx b/node_modules/react-native-web/dist/exports/Picker/MutiPicker.jsx
new file mode 100644
index 0000000..ee3ffba
--- /dev/null
+++ b/node_modules/react-native-web/dist/exports/Picker/MutiPicker.jsx
@@ -0,0 +1,27 @@
+import * as React from 'react';
+import View from '../View';
+import MultiPickerMixin from './MultiPickerMixin';
+import StyleSheet from '../StyleSheet';
+
+const styles = {
+  picker: {
+    display: 'block',
+    position: 'relative',
+    // overflow: 'hidden',
+    width: '100%',
+    flex: 1,
+    height: '238px',
+    backgroundColor: 'transparent',
+  },
+};
+
+const MultiPicker = props => {
+  const { rootNativeProps, children, style } = props;
+  return (
+    <View {...rootNativeProps} style={StyleSheet.flatten([ styles.picker, style ])}>
+      {children}
+    </View>
+  );
+};
+
+export default MultiPickerMixin(MultiPicker);
diff --git a/node_modules/react-native-web/dist/exports/Picker/Picker.jsx b/node_modules/react-native-web/dist/exports/Picker/Picker.jsx
new file mode 100644
index 0000000..be279ba
--- /dev/null
+++ b/node_modules/react-native-web/dist/exports/Picker/Picker.jsx
@@ -0,0 +1,396 @@
+import * as React from 'react';
+import StyleSheet from '../StyleSheet';
+import PickerMixin from './PickerMixin';
+import MutiPicker from './MutiPicker';
+
+const styles = {
+  picker: {
+    position: 'relative',
+    overflow: 'hidden',
+    width: '100%',
+    flex: 1,
+    height: '238px',
+    display: 'flex',
+    justifyContent: 'center',
+  },
+
+  pickerItem: {
+    fontSize: '16px',
+    height: '34px',
+    lineHeight: '34px',
+    margin: '0 20px',
+    whiteSpace: 'nowrap',
+    position: 'relative',
+    overflow: 'hidden',
+    textOverflow: 'ellipsis',
+    color: '#9b9b9b',
+    // width: '100%',
+    backgroundColor: 'transparent',
+    boxSizing: 'border-box',
+    alignSelf: 'center',
+    display: 'flex',
+    justifyContent: 'center',
+  },
+
+  indicator: {
+    margin: '0 auto',
+    boxSizing: 'border-box',
+    width: '100%',
+    height: '34px',
+    position: 'absolute',
+    left: 0,
+    top: '102px',
+    zIndex: 3,
+    borderTop: '1PX solid #ddd',
+    borderBottom: '1PX solid #ddd',
+  },
+
+  mask: {
+    position: 'absolute',
+    left: 0,
+    top: 0,
+    height: '100%',
+    margin: '0 auto',
+    width: '100%',
+    zIndex: 3,
+    backgroundImage:
+      'linear-gradient(to bottom, rgba(255, 255, 255, 0.95), rgba(255, 255, 255, 0.6)), linear-gradient(to top, rgba(255, 255, 255, 0.95), rgba(255, 255, 255, 0.6))',
+    backgroundPosition: 'top, bottom',
+    backgroundSize: '100% 204px',
+    backgroundRepeat: 'no-repeat',
+  },
+};
+class Picker extends React.Component {
+  static defaultProps = {
+    prefixCls: 'rmc-picker',
+  };
+
+  rootRef;
+  maskRef;
+  contentRef;
+  indicatorRef;
+  itemHeight;
+  scrollValue;
+
+  scrollHanders = (() => {
+    let scrollY = -1;
+    let lastY = 0;
+    let startY = 0;
+    let scrollDisabled = false;
+    let isMoving = false;
+
+    const setTransform = (nodeStyle, value) => {
+      nodeStyle.transform = value;
+      nodeStyle.webkitTransform = value;
+    };
+
+    const setTransition = (nodeStyle, value) => {
+      nodeStyle.transition = value;
+      nodeStyle.webkitTransition = value;
+    };
+
+    const scrollTo = (_x, y, time = 0.3) => {
+      if (scrollY !== y) {
+        scrollY = y;
+        if (time && !this.props.noAnimate) {
+          setTransition(this.contentRef.style, `cubic-bezier(0,0,0.2,1.15) ${time}s`);
+        }
+        setTransform(this.contentRef.style, `translate3d(0,${-y}px,0)`);
+        setTimeout(() => {
+          this.scrollingComplete();
+          if (this.contentRef) {
+            setTransition(this.contentRef.style, '');
+          }
+        }, +time * 1000);
+      }
+    };
+
+    const Velocity = ((minInterval = 30, maxInterval = 100) => {
+      let _time = 0;
+      let _y = 0;
+      let _velocity = 0;
+      const recorder = {
+        record: y => {
+          const now = +new Date();
+          _velocity = (y - _y) / (now - _time);
+          if (now - _time >= minInterval) {
+            _velocity = now - _time <= maxInterval ? _velocity : 0;
+            _y = y;
+            _time = now;
+          }
+        },
+        getVelocity: y => {
+          if (y !== _y) {
+            recorder.record(y);
+          }
+          return _velocity;
+        },
+      };
+      return recorder;
+    })();
+
+    const onFinish = () => {
+      isMoving = false;
+      let targetY = scrollY;
+
+      const height = (this.props.children.length - 1) * this.itemHeight;
+
+      let time = 0.3;
+
+      const velocity = Velocity.getVelocity(targetY) * 4;
+      if (velocity) {
+        targetY = velocity * 40 + targetY;
+        time = Math.abs(velocity) * 0.1;
+      }
+
+      if (targetY % this.itemHeight !== 0) {
+        targetY = Math.round(targetY / this.itemHeight) * this.itemHeight;
+      }
+
+      if (targetY < 0) {
+        targetY = 0;
+      } else if (targetY > height) {
+        targetY = height;
+      }
+
+      scrollTo(0, targetY, time < 0.3 ? 0.3 : time);
+      this.onScrollChange();
+    };
+
+    const onStart = (y) => {
+      if (scrollDisabled) {
+        return;
+      }
+
+      isMoving = true;
+      startY = y;
+      lastY = scrollY;
+    };
+
+    const onMove = (y) => {
+      if (scrollDisabled || !isMoving) {
+        return;
+      }
+
+      scrollY = lastY - y + startY;
+      Velocity.record(scrollY);
+
+      this.onScrollChange();
+      setTransform(this.contentRef.style, `translate3d(0,${-scrollY}px,0)`);
+    };
+
+    return {
+      touchstart: (evt) => onStart(evt.touches[0].pageY),
+      mousedown: (evt) => onStart(evt.pageY),
+      touchmove: (evt) => {
+        evt.preventDefault();
+        onMove(evt.touches[0].pageY);
+      },
+      mousemove: (evt) => {
+        evt.preventDefault();
+        onMove(evt.pageY);
+      },
+      touchend: () => onFinish(),
+      touchcancel: () => onFinish(),
+      mouseup: () => onFinish(),
+      getValue: () => {
+        return scrollY;
+      },
+      scrollTo,
+      setDisabled: (disabled = false) => {
+        scrollDisabled = disabled;
+      },
+    };
+  })();
+
+  constructor(props) {
+    super(props);
+
+    let selectedValueState;
+    const { selectedValue, defaultSelectedValue } = this.props;
+    if (selectedValue !== undefined) {
+      selectedValueState = selectedValue;
+    } else if (defaultSelectedValue !== undefined) {
+      selectedValueState = defaultSelectedValue;
+    } else {
+      const children = React.Children.toArray(this.props.children);
+      selectedValueState = children && children[0] && children[0].props.value;
+    }
+    this.state = {
+      selectedValue: selectedValueState,
+    };
+  }
+
+  componentDidMount() {
+    const { contentRef, indicatorRef, maskRef, rootRef } = this;
+    setTimeout(() => {
+      const rootHeight = rootRef.getBoundingClientRect().height;
+      // https://github.com/react-component/m-picker/issues/18
+      const itemHeight = (this.itemHeight = indicatorRef.getBoundingClientRect().height);
+      let num = Math.floor(rootHeight / itemHeight);
+      if (num % 2 === 0) {
+        num--;
+      }
+      num--;
+      num /= 2;
+      contentRef.style.padding = `${itemHeight * num}px 0`;
+      indicatorRef.style.top = `${itemHeight * num}px`;
+      maskRef.style.backgroundSize = `100% ${itemHeight * num}px`;
+      this.scrollHanders.setDisabled(this.props.disabled);
+      this.props.select(this.state.selectedValue, this.itemHeight, this.scrollTo);
+
+      const passiveSupported = this.passiveSupported();
+      const willPreventDefault = passiveSupported ? { passive: false } : false;
+      const willNotPreventDefault = passiveSupported ? { passive: true } : false;
+      Object.keys(this.scrollHanders).forEach(key => {
+        if (key.indexOf('touch') === 0 || key.indexOf('mouse') === 0) {
+          const pd = key.indexOf('move') >= 0 ? willPreventDefault : willNotPreventDefault;
+          rootRef.addEventListener(key, this.scrollHanders[key], pd);
+        }
+      });
+    }, 0);
+  }
+
+  componentWillUnmount() {
+    Object.keys(this.scrollHanders).forEach(key => {
+      if (key.indexOf('touch') === 0 || key.indexOf('mouse') === 0) {
+        this.rootRef.removeEventListener(key, this.scrollHanders[key]);
+      }
+    });
+  }
+
+  passiveSupported() {
+    let passiveSupported = false;
+
+    try {
+      const options = Object.defineProperty({}, 'passive', {
+        get: () => {
+          passiveSupported = true;
+        },
+      });
+      window.addEventListener('test', null, options);
+    } catch (err) {}
+    return passiveSupported;
+  }
+
+  componentWillReceiveProps(nextProps) {
+    if ('selectedValue' in nextProps) {
+      if (this.state.selectedValue !== nextProps.selectedValue) {
+        this.setState(
+          {
+            selectedValue: nextProps.selectedValue,
+          },
+          () => {
+            this.props.select(
+              nextProps.selectedValue,
+              this.itemHeight,
+              nextProps.noAnimate ? this.scrollToWithoutAnimation : this.scrollTo
+            );
+          }
+        );
+      }
+    }
+    this.scrollHanders.setDisabled(nextProps.disabled);
+  }
+
+  shouldComponentUpdate(nextProps, nextState) {
+    return (
+      this.state.selectedValue !== nextState.selectedValue ||
+      this.props.children !== nextProps.children
+    );
+  }
+
+  componentDidUpdate() {
+    this.props.select(this.state.selectedValue, this.itemHeight, this.scrollToWithoutAnimation);
+  }
+
+  scrollTo = top => {
+    this.scrollHanders.scrollTo(0, top);
+  };
+
+  scrollToWithoutAnimation = top => {
+    this.scrollHanders.scrollTo(0, top, 0);
+  };
+
+  fireValueChange = selectedValue => {
+    if (selectedValue !== this.state.selectedValue) {
+      if (!('selectedValue' in this.props)) {
+        this.setState({
+          selectedValue,
+        });
+      }
+      if (this.props.onValueChange) {
+        this.props.onValueChange(selectedValue);
+      }
+    }
+  };
+
+  onScrollChange = () => {
+    const top = this.scrollHanders.getValue();
+    if (top >= 0) {
+      const children = React.Children.toArray(this.props.children);
+      const index = this.props.computeChildIndex(top, this.itemHeight, children.length);
+      if (this.scrollValue !== index) {
+        this.scrollValue = index;
+        const child = children[index];
+        if (child && this.props.onScrollChange) {
+          this.props.onScrollChange(child.props.value);
+        } else if (!child && console.warn) {
+          console.warn('child not found', children, index);
+        }
+      }
+    }
+  };
+
+  scrollingComplete = () => {
+    const top = this.scrollHanders.getValue();
+    if (top >= 0) {
+      this.props.doScrollingComplete(top, this.itemHeight, this.fireValueChange);
+    }
+  };
+
+  getValue() {
+    if ('selectedValue' in this.props) {
+      return this.props.selectedValue;
+    }
+    const children = React.Children.toArray(this.props.children);
+    return children && children[0] && children[0].props.value;
+  }
+
+  render() {
+    const { props } = this;
+    const { prefixCls, itemStyle, children, ...rest } = props;
+    const { selectedValue } = this.state;
+    const itemClassName = `${prefixCls}-item`;
+    const selectedItemClassName = `${itemClassName} ${prefixCls}-item-selected`;
+    const map = (item) => {
+      const { className = '', style, value, label } = item.props;
+      const { color = '#333' } = StyleSheet.flatten(itemStyle);
+      const textStyle = StyleSheet.flatten([styles.pickerItem, itemStyle, { color }]);
+      return (
+        <div
+          className={`${
+            selectedValue === value ? selectedItemClassName : itemClassName
+          } ${className}`}
+          style={{ ...styles.pickerItem, ...style, ...textStyle }}
+          key={value}
+        >
+          {label}
+        </div>
+      );
+    };
+    // compatibility for preact
+    const items = React.Children ? React.Children.map(children, map) : [].concat(children).map(map);
+    return (
+      <MutiPicker {...rest}>
+        <div style={styles.picker} ref={el => (this.rootRef = el)}>
+          <div style={styles.mask} ref={el => (this.maskRef = el)} />
+          <div ref={el => (this.indicatorRef = el)} style={styles.indicator} />
+          <div ref={el => (this.contentRef = el)}>{items}</div>
+        </div>
+      </MutiPicker>
+    );
+  }
+}
+
+export default PickerMixin(Picker)
diff --git a/node_modules/react-native-web/dist/exports/Picker/PickerItem.js b/node_modules/react-native-web/dist/exports/Picker/PickerItem.js
deleted file mode 100644
index fc4e80b..0000000
--- a/node_modules/react-native-web/dist/exports/Picker/PickerItem.js
+++ /dev/null
@@ -1,24 +0,0 @@
-/**
- * Copyright (c) Nicolas Gallagher.
- * Copyright (c) Facebook, Inc. and its affiliates.
- *
- * This source code is licensed under the MIT license found in the
- * LICENSE file in the root directory of this source tree.
- *
- * 
- */
-import createElement from '../createElement';
-export default function PickerItem(props) {
-  var color = props.color,
-      label = props.label,
-      testID = props.testID,
-      value = props.value;
-  var style = {
-    color: color
-  };
-  return createElement('option', {
-    style: style,
-    testID: testID,
-    value: value
-  }, label);
-}
\ No newline at end of file
diff --git a/node_modules/react-native-web/dist/exports/Picker/PickerItem.js.flow b/node_modules/react-native-web/dist/exports/Picker/PickerItem.js.flow
deleted file mode 100644
index a9587ed..0000000
--- a/node_modules/react-native-web/dist/exports/Picker/PickerItem.js.flow
+++ /dev/null
@@ -1,18 +0,0 @@
-/**
- * Copyright (c) Nicolas Gallagher.
- * Copyright (c) Facebook, Inc. and its affiliates.
- *
- * This source code is licensed under the MIT license found in the
- * LICENSE file in the root directory of this source tree.
- *
- * @noflow
- */
-import type { ColorValue } from '../../types';
-import createElement from '../createElement';
-type Props = {
-  color?: ColorValue,
-  label: string,
-  testID?: string,
-  value?: number | string,
-};
-declare export default function PickerItem(props: Props): any;
\ No newline at end of file
diff --git a/node_modules/react-native-web/dist/exports/Picker/PickerMixin.jsx b/node_modules/react-native-web/dist/exports/Picker/PickerMixin.jsx
new file mode 100644
index 0000000..dba082b
--- /dev/null
+++ b/node_modules/react-native-web/dist/exports/Picker/PickerMixin.jsx
@@ -0,0 +1,55 @@
+/* tslint:disable:no-console */
+import * as React from 'react';
+
+const Item = _props => null;
+
+export default function(ComposedComponent) {
+  return class extends React.Component {
+    static Item = Item;
+
+    select = (value, itemHeight, scrollTo) => {
+      const children = React.Children.toArray(this.props.children);
+      for (let i = 0, len = children.length; i < len; i++) {
+        if (children[i].props.value === value) {
+          this.selectByIndex(i, itemHeight, scrollTo);
+          return;
+        }
+      }
+      this.selectByIndex(0, itemHeight, scrollTo);
+    };
+
+    selectByIndex(index, itemHeight, zscrollTo) {
+      if (index < 0 || index >= React.Children.count(this.props.children) || !itemHeight) {
+        return;
+      }
+      zscrollTo(index * itemHeight);
+    }
+
+    computeChildIndex(top, itemHeight, childrenLength) {
+      const index = Math.round(top / itemHeight);
+      return Math.min(index, childrenLength - 1);
+    }
+
+    doScrollingComplete = (top, itemHeight, fireValueChange) => {
+      const children = React.Children.toArray(this.props.children);
+      const index = this.computeChildIndex(top, itemHeight, children.length);
+      const child = children[index];
+      if (child) {
+        fireValueChange(child.props.value);
+      } else if (console.warn) {
+        console.warn('child not found', children, index);
+      }
+    };
+
+    render() {
+      return (
+        <ComposedComponent
+          {...this.props}
+          doScrollingComplete={this.doScrollingComplete}
+          computeChildIndex={this.computeChildIndex}
+          select={this.select}
+        />
+      );
+    }
+  };
+}
diff --git a/node_modules/react-native-web/dist/exports/Picker/index.js b/node_modules/react-native-web/dist/exports/Picker/index.js
index 54df025..eda826f 100644
--- a/node_modules/react-native-web/dist/exports/Picker/index.js
+++ b/node_modules/react-native-web/dist/exports/Picker/index.js
@@ -1,72 +1,3 @@
-function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }
+import Picker from './Picker';
 
-function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }
-
-function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
-
-function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }
-
-/**
- * Copyright (c) Nicolas Gallagher.
- * Copyright (c) Facebook, Inc. and its affiliates.
- *
- * This source code is licensed under the MIT license found in the
- * LICENSE file in the root directory of this source tree.
- *
- * 
- */
-import * as React from 'react';
-import createElement from '../createElement';
-import useMergeRefs from '../../modules/useMergeRefs';
-import usePlatformMethods from '../../modules/usePlatformMethods';
-import PickerItem from './PickerItem';
-import StyleSheet from '../StyleSheet';
-var Picker = /*#__PURE__*/React.forwardRef(function (props, forwardedRef) {
-  var children = props.children,
-      enabled = props.enabled,
-      onValueChange = props.onValueChange,
-      selectedValue = props.selectedValue,
-      style = props.style,
-      testID = props.testID,
-      itemStyle = props.itemStyle,
-      mode = props.mode,
-      prompt = props.prompt,
-      other = _objectWithoutPropertiesLoose(props, ["children", "enabled", "onValueChange", "selectedValue", "style", "testID", "itemStyle", "mode", "prompt"]);
-
-  var hostRef = React.useRef(null);
-
-  function handleChange(e) {
-    var _e$target = e.target,
-        selectedIndex = _e$target.selectedIndex,
-        value = _e$target.value;
-
-    if (onValueChange) {
-      onValueChange(value, selectedIndex);
-    }
-  } // $FlowFixMe
-
-
-  var supportedProps = _objectSpread({
-    children: children,
-    disabled: enabled === false ? true : undefined,
-    onChange: handleChange,
-    style: [styles.initial, style],
-    testID: testID,
-    value: selectedValue
-  }, other);
-
-  var platformMethodsRef = usePlatformMethods(supportedProps);
-  var setRef = useMergeRefs(hostRef, platformMethodsRef, forwardedRef);
-  supportedProps.ref = setRef;
-  return createElement('select', supportedProps);
-}); // $FlowFixMe
-
-Picker.Item = PickerItem;
-var styles = StyleSheet.create({
-  initial: {
-    fontFamily: 'System',
-    fontSize: 'inherit',
-    margin: 0
-  }
-});
 export default Picker;
diff --git a/node_modules/react-native-web/dist/exports/Picker/index.js.flow b/node_modules/react-native-web/dist/exports/Picker/index.js.flow
deleted file mode 100644
index 9eb16f8..0000000
--- a/node_modules/react-native-web/dist/exports/Picker/index.js.flow
+++ /dev/null
@@ -1,73 +0,0 @@
-/**
- * Copyright (c) Nicolas Gallagher.
- * Copyright (c) Facebook, Inc. and its affiliates.
- *
- * This source code is licensed under the MIT license found in the
- * LICENSE file in the root directory of this source tree.
- *
- * @flow
- */
-import type { PlatformMethods } from '../../types';
-import type { ViewProps } from '../View';
-import * as React from 'react';
-import createElement from '../createElement';
-import useMergeRefs from '../../modules/useMergeRefs';
-import usePlatformMethods from '../../modules/usePlatformMethods';
-import PickerItem from './PickerItem';
-import StyleSheet from '../StyleSheet';
-type PickerProps = { ...ViewProps,
-  children?: typeof PickerItem | Array<typeof PickerItem>,
-  enabled?: boolean,
-  onValueChange?: (number | string, number) => void,
-  selectedValue?: number | string,
-  style?: any,
-
-  /* compat */
-  itemStyle?: any,
-  mode?: string,
-  prompt?: string,
-};
-const Picker: React.AbstractComponent<PickerProps, HTMLElement & PlatformMethods> = React.forwardRef((props, forwardedRef) => {
-  const {
-    children,
-    enabled,
-    onValueChange,
-    selectedValue,
-    style,
-    testID,
-
-    /* eslint-disable */
-    itemStyle,
-    mode,
-    prompt,
-
-    /* eslint-enable */
-    ...other
-  } = props;
-  const hostRef = React.useRef(null);
-  declare function handleChange(e: Object): any; // $FlowFixMe
-
-  const supportedProps: any = {
-    children,
-    disabled: enabled === false ? true : undefined,
-    onChange: handleChange,
-    style: [styles.initial, style],
-    testID,
-    value: selectedValue,
-    ...other
-  };
-  const platformMethodsRef = usePlatformMethods(supportedProps);
-  const setRef = useMergeRefs(hostRef, platformMethodsRef, forwardedRef);
-  supportedProps.ref = setRef;
-  return createElement('select', supportedProps);
-}); // $FlowFixMe
-
-Picker.Item = PickerItem;
-const styles = StyleSheet.create({
-  initial: {
-    fontFamily: 'System',
-    fontSize: 'inherit',
-    margin: 0
-  }
-});
-export default Picker;
\ No newline at end of file
